<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Investment Simulator - Stock Exchange</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background-color: #121212;
            color: #ffffff;
            margin: 0;
            padding: 0;
            display: flex;
            height: 100vh;
            overflow: hidden;
        }

        /* Global Container */
        .container {
            display: flex;
            width: 100%;
        }

        /* Sidebar (Portfolio) */
        .sidebar {
            width: 25%;
            background-color: #1e1e1e;
            padding: 20px;
            box-shadow: 2px 0px 10px rgba(0, 0, 0, 0.3);
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        .sidebar h2 {
            color: #008cba;
        }

        .sidebar table {
            width: 100%;
            border-collapse: collapse;
        }

        .sidebar table th, .sidebar table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #333;
        }

        /* Main Content */
        .main-content {
            flex-grow: 1;
            padding: 20px;
            display: flex;
            flex-direction: column;
        }

        .main-content h1 {
            color: #008cba;
            font-size: 1.8rem;
        }

        /* Stock Trading Section */
        .trade-section {
            background-color: #1e1e1e;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
            display: flex;
            flex-direction: column;
        }

        .trade-section label {
            font-size: 1rem;
            color: #ffffff;
        }

        .trade-section input, .trade-section button {
            width: 100%;
            padding: 15px;
            margin: 10px 0;
            border-radius: 8px;
            border: none;
            font-size: 1rem;
        }

        .trade-section input {
            background-color: #2a2a2a;
            color: #ffffff;
            max-width: 100%;
            box-sizing: border-box;
        }

        .trade-section button {
            background-color: #008cba;
            color: #fff;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .trade-section button:hover {
            background-color: #007bb5;
        }

        /* Suggestion Box Styling */
        #suggestions {
            background-color: #2a2a2a;
            border-radius: 5px;
            margin-top: 5px;
            max-height: 200px;
            overflow-y: auto;
        }

        .suggestion-item {
            padding: 10px;
            border-bottom: 1px solid #333;
            color: #fff;
            cursor: pointer;
        }

        .suggestion-item strong {
            color: #008cba; /* Highlight color */
        }

        .suggestion-item:hover {
            background-color: #333;
        }

        /* TradingView Chart Section */
        #tradingview-widget {
            margin-top: 20px;
            background-color: #1e1e1e;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
            height: 400px;
            display: none; /* Hidden by default */
        }

        /* Transaction History */
        .transaction-history {
            margin-top: 20px;
            background-color: #1e1e1e;
            padding: 20px;
            border-radius: 10px;
            height: auto;
            max-height: 500px; /* Increased max-height */
            overflow-y: auto;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
        }

        .transaction-history table {
            width: 100%;
            border-collapse: collapse;
        }

        .transaction-history th, .transaction-history td {
            padding: 10px;
            border-bottom: 1px solid #333;
        }

        /* Budget Section */
        #budget-section {
            background-color: #008cba;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            margin-bottom: 10px;
        }

        #budget-section h2 {
            margin: 0;
            color: #fff;
            font-size: 1.5rem;
        }

        /* Responsive Design */
        @media screen and (max-width: 1200px) {
            .sidebar {
                width: 30%;
            }

            .main-content {
                padding: 10px;
            }

            .trade-section, .transaction-history {
                margin-bottom: 15px;
            }
        }

        @media screen and (max-width: 768px) {
            body {
                flex-direction: column;
            }

            .sidebar {
                width: 100%;
                height: auto;
            }

            .main-content {
                width: 100%;
            }

            .trade-section {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Sidebar (Portfolio) -->
        <div class="sidebar">
            <div>
                <h2>Your Portfolio</h2>
                <div class="table-container">
                    <table id="portfolioTable">
                        <thead>
                            <tr>
                                <th>Symbol</th>
                                <th>Quantity</th>
                                <th>Purchase Price</th>
                                <th>Current Price</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Portfolio will be populated here -->
                        </tbody>
                    </table>
                </div>
            </div>
            <div id="budget-section">
                <h2>Budget: $<span id="budget">10000.00</span></h2>
            </div>
        </div>

        <!-- Main Content Area -->
        <div class="main-content">
            <h1>Investment Simulator</h1>
            <!-- Trading Section -->
            <div class="trade-section">
                <label for="stockSymbol">Stock Symbol or Company Name</label>
                <input type="text" id="stock-symbol" onkeyup="filterSymbols()" placeholder="AAPL, TSLA, Apple Inc., etc.">
                <div id="suggestions"></div>

                <label for="quantity">Quantity</label>
                <input type="number" id="quantity" placeholder="Enter Quantity">

                <h3>Current Price: $<span id="currentPrice">0.00</span></h3>

                <button onclick="buyStock()">Buy</button>
                <button onclick="sellStock()">Sell</button>
            </div>

            <!-- TradingView Widget Container -->
            <div id="tradingview-widget"></div>

            <!-- Transaction History -->
            <div class="transaction-history">
                <h2>Transaction History</h2>
                <table id="transactionTable">
                    <thead>
                        <tr>
                            <th>Type</th>
                            <th>Symbol</th>
                            <th>Quantity</th>
                            <th>Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Transactions will be populated here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- TradingView Script -->
    <script type="text/javascript" src="https://s3.tradingview.com/tv.js"></script>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        let budget = 10000;
        let portfolio = {};
        const apiKey = 'crvr62hr01qkji45on7gcrvr62hr01qkji45on80';
        let stockList = [];

        // Fetch stock list from Finnhub API
        async function fetchStockList() {
            const url = `https://finnhub.io/api/v1/stock/symbol?exchange=US&token=${apiKey}`;
            const response = await fetch(url);
            const data = await response.json();
            stockList = data.map(stock => ({
                symbol: stock.symbol,
                description: stock.description
            }));
        }

        // Fetch the current stock price from Finnhub API
        async function fetchStockPrice(symbol) {
            const url = `https://finnhub.io/api/v1/quote?symbol=${symbol}&token=${apiKey}`;
            const response = await fetch(url);
            const data = await response.json();
            return data.c; // current price
        }

        // Filter symbols and display suggestions with highlighted matches
        function filterSymbols() {
            const input = $('#stock-symbol').val().toUpperCase();
            const suggestionsDiv = $('#suggestions');
            suggestionsDiv.empty();

            // Prioritize exact match followed by partial matches
            const exactMatches = stockList.filter(stock => 
                stock.symbol === input || stock.description.toUpperCase() === input
            );

            const partialMatches = stockList.filter(stock => 
                (stock.symbol.startsWith(input) || stock.description.toUpperCase().startsWith(input)) && !exactMatches.includes(stock)
            );

            const otherMatches = stockList.filter(stock => 
                (stock.symbol.includes(input) || stock.description.toUpperCase().includes(input)) && !exactMatches.includes(stock) && !partialMatches.includes(stock)
            );

            // Combine all matches and display top 5
            const sortedStocks = [...exactMatches, ...partialMatches, ...otherMatches];

            sortedStocks.slice(0, 5).forEach(stock => {
                const highlightedSymbol = highlightMatch(stock.symbol, input);
                const highlightedDescription = highlightMatch(stock.description, input);

                const suggestionItem = $('<div>')
                    .addClass('suggestion-item')
                    .html(`${highlightedSymbol} - ${highlightedDescription}`)
                    .on('click', () => selectSymbol(stock.symbol));

                suggestionsDiv.append(suggestionItem);
            });
        }

        // Highlight matching letters
        function highlightMatch(text, match) {
            const regex = new RegExp(`(${match})`, 'gi');
            return text.replace(regex, '<strong>$1</strong>');
        }

        // Select a stock symbol from the suggestion box
        async function selectSymbol(symbol) {
            $('#stock-symbol').val(symbol);
            $('#suggestions').empty();
            await updateCurrentPrice(symbol); // Update current price and load TradingView
        }

        // Update current price and load TradingView widget
        async function updateCurrentPrice(symbol) {
            const price = await fetchStockPrice(symbol);
            $('#currentPrice').text(price.toFixed(2));

            // Load TradingView widget for the selected stock
            loadTradingViewWidget(symbol);
        }

        // Function to load TradingView widget
        function loadTradingViewWidget(symbol) {
            $('#tradingview-widget').empty(); // Clear previous widget

            if (!symbol) {
                $('#tradingview-widget').hide();
                return;
            }

            $('#tradingview-widget').show(); // Show widget only if symbol is selected

            new TradingView.widget({
                "width": "100%",
                "height": 400,
                "symbol": symbol,
                "interval": "D",
                "theme": "dark",
                "style": "1",
                "locale": "en",
                "toolbar_bg": "#f1f3f6",
                "container_id": "tradingview-widget"
            });
        }

        // Buy stock function
        async function buyStock() {
            const symbol = $('#stock-symbol').val().toUpperCase();
            const quantity = parseInt($('#quantity').val());
            const currentPrice = await fetchStockPrice(symbol);
            const totalCost = currentPrice * quantity;

            if (budget >= totalCost) {
                budget -= totalCost;
                portfolio[symbol] = (portfolio[symbol] || 0) + quantity;
                updatePortfolio();
                updateTransactionHistory('Buy', symbol, quantity, currentPrice);
                updateBudget();
            } else {
                alert('Not enough budget!');
            }
        }

        // Sell stock function
        async function sellStock() {
            const symbol = $('#stock-symbol').val().toUpperCase();
            const quantity = parseInt($('#quantity').val());
            const currentPrice = await fetchStockPrice(symbol);

            if (portfolio[symbol] && portfolio[symbol] >= quantity) {
                portfolio[symbol] -= quantity;
                const totalGain = currentPrice * quantity;
                budget += totalGain;
                updatePortfolio();
                updateTransactionHistory('Sell', symbol, quantity, currentPrice);
                updateBudget();
            } else {
                alert('Not enough shares to sell!');
            }
        }

        // Update portfolio display
        function updatePortfolio() {
            const portfolioTableBody = $('#portfolioTable tbody');
            portfolioTableBody.empty();

            for (const symbol in portfolio) {
                const row = $('<tr>');
                const currentPrice = $('#currentPrice').text();
                row.append($('<td>').text(symbol));
                row.append($('<td>').text(portfolio[symbol]));
                row.append($('<td>').text((currentPrice * portfolio[symbol]).toFixed(2)));
                portfolioTableBody.append(row);
            }
        }

        // Update transaction history display
        function updateTransactionHistory(type, symbol, quantity, price) {
            const transactionTableBody = $('#transactionTable tbody');
            const row = $('<tr>');
            row.append($('<td>').text(type));
            row.append($('<td>').text(symbol));
            row.append($('<td>').text(quantity));
            row.append($('<td>').text(price.toFixed(2)));
            transactionTableBody.append(row);
        }

        // Update budget display
        function updateBudget() {
            $('#budget').text(budget.toFixed(2));
        }

        // Fetch stock list on load
        fetchStockList();
    </script>
</body>
</html>
